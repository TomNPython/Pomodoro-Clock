class Pomodoro extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      sessionTime: 25,
      breakTime: 5,
      sessionOn: false,
      minutes: 25,
      workState: 'Get Working!',
      count: 0,
      display: 25 + ':00'
    }
    this.timer = null
  }
  
  componentWillUnmount() {
clearInterval(this.timer);
  }
  
  incrementSession = () => {
    if (this.state.sessionTime < 60) {
    this.setState({
      sessionTime: this.state.sessionTime += 1,
      minutes: this.state.minutes += 1,
    })
  }}
  
  decrementSession = () => {
    if (this.state.sessionTime > 0) {
    this.setState({
      sessionTime: this.state.sessionTime -= 1,
      minutes: this.state.minutes -= 1,
    })
  }}
  
  incrementBreak = () => {
    if (this.state.breakTime < 60) {
    this.setState({
      breakTime: this.state.breakTime += 1
    })
  }}
  
  decrementBreak = () => {
    if (this.state.breakTime > 0) {
    this.setState({
      breakTime: this.state.breakTime -= 1
    })
  }};
  
  startSession = () => {
     this.timer = setInterval(this.sessionTimer, 1000) 
    this.setState({
      sessionOn: true,
      minutes: this.state.minutes * 60
    })
    document.getElementById('start').style.display = 'none'
    
    document.getElementById('pause').style.display = 'inline'
  };

reStartSession = () => {
    this.setState({
      sessionOn: true,
    })
 this.timer = setInterval(this.sessionTimer, 1000) 
    document.getElementById('start').style.display = 'none'
    
    document.getElementById('pause').style.display = 'inline'
  
  document.getElementById('restart').style.display = 'none'
  };
  
  sessionTimer = () => {
    if (this.state.minutes % 60 >= 10 && this.state.sessionOn) {
    this.setState({  
      display: Math.floor(this.state.minutes/60) + ':' + this.state.minutes%60,
           minutes: this.state.minutes -=1,
  })
    } 
    else if (this.state.minutes > 0 && this.state.sessionOn) {
      this.setState({
      display: Math.floor(this.state.minutes/60) + ':0' + this.state.minutes%60,
            minutes: this.state.minutes -=1,
  })
    }
    else if (this.state.minutes === 0) {
      this.buzzer(this.state.minutes)
      this.state.count += 1
      this.breakCountdown()
      }
    else {
      clearInterval(this.timer)
    } 
    }
  
  pauseTimer = () => {
    clearInterval(this.timer)
    document.getElementById('pause').style.display = 'none'
    
    document.getElementById('restart').style.display = 'inline'
  }
  
  breakCountdown = () => {
    if (this.state.count % 2 != 0) {
    this.setState({
      minutes: this.state.breakTime * 60,
      display: Math.floor(this.state.minutes/60) + ':0' + this.state.minutes%60,
      workState: 'Have A Break...',
    })
    clearInterval()
    } else {
      this.resetSession()
    }
    }
  
  
  resetSession = () => {
    this.setState({
      sessionTime: 25,
      breakTime: 5,
      sessionOn: false,
      minutes: 25,
      display: 25 + ':00',
      workState: 'Get Working!'
  })
    clearInterval(this.timer)
    
    document.getElementById('start').style.display = 'inline'
    
    document.getElementById('pause').style.display = 'none';
    
    document.getElementById('restart').style.display = 'none'
  }
  
   startBreak = () => {
     this.setState({
       minutes: this.state.breakTime
     })
    setInterval(this.breakTimer, 1000)
  }
  
  breakTimer = () => {
    if (this.state.breakTime > 0) {
    this.setState({
    breakTime: this.state.breakTime - 1,
      display: Math.floor(this.state.minutes/60) + ':' + this.state.minutes%60      
  })} else {
      this.setState({
        display: this.state.minutes
      })
      this.startSession()
    }
  }
  
   buzzer(clock) {
    if (clock === 0) {
      this.countdownSound.play()
    }
}
  

  
  render() {
    return (
      <div>
        <h1 id='title'>Mr. Pomodoro</h1>
        <div id='big-box' class='inner-container'>
          <div class='inner-box'>
      <div id='session-box'>
        <h2>Session Length
        </h2>
        <button onClick={this.decrementSession}>-</button>
        <span>{this.state.sessionTime} minutes</span>
        <button onClick={this.incrementSession}>+</button>
        <br/>
        </div>
      <div id='break-box'>
        <h2>Break Length
        </h2>
        <button onClick={this.decrementBreak}>-</button>
        <span>{this.state.breakTime} minutes</span>
        <button onClick={this.incrementBreak}>+</button>
        <br/>
        </div>
          </div>
          <div id='timer' class='inner-box'>
            <p>{this.state.workState}</p>
            <span id='display-timer'>{this.state.display}</span>
            <br/>
          <button onClick={this.startSession} id='start'>Start</button>
            <button onClick={this.pauseTimer} id='pause'>Pause</button>
            <button onClick={this.reStartSession} id='restart'>Restart</button>
        <button onClick={this.resetSession}>Reset</button></div>
        </div>
        <audio id='alarm' src='https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3' ref={(audio) => {this.countdownSound = audio }} />
        </div>
    )
  }
}


ReactDOM.render(<Pomodoro />, document.getElementById('app'))



// fix seconds timer into minutes (Math.floor stuff)

// include start stop as well as reset button

// move start reset button to under timer, add stop button to start button (or seperate ones), that sets isOn to false to stop it counting down more but doesnt reset it to 25 and 5
